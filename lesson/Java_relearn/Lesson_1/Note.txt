üìò Lesson 1 ‚Äì Java OOP & Collection
Ph·∫ßn A ‚Äì OOP c∆° b·∫£n
1. Class & Object

Class: b·∫£n thi·∫øt k·∫ø (blueprint).

Object: th·ª±c th·ªÉ c·ª• th·ªÉ t·∫°o t·ª´ class.

V√≠ d·ª•:

class Student {
    String name;
    int age;

    void study() {
        System.out.println(name + " is studying");
    }
}

public class Main {
    public static void main(String[] args) {
        Student s = new Student();
        s.name = "Linh";
        s.age = 22;
        s.study();
    }
}

2. Abstract Class

L√† class kh√¥ng th·ªÉ kh·ªüi t·∫°o tr·ª±c ti·∫øp, d√πng ƒë·ªÉ ƒë·ªãnh nghƒ©a h√†nh vi chung.

C√≥ th·ªÉ ch·ª©a method abstract (ph·∫£i override ·ªü class con).

V√≠ d·ª•:

abstract class Person {
    String name;

    public Person(String name) { this.name = name; }

    public abstract void work();

    public void sayHello() {
        System.out.println("Hello, I am " + name);
    }
}

class Teacher extends Person {
    public Teacher(String name) { super(name); }

    @Override
    public void work() {
        System.out.println(name + " is teaching.");
    }
}

3. Interface

Gi·ªëng nh∆∞ ‚Äúh·ª£p ƒë·ªìng‚Äù (contract).

M·ªôt class c√≥ th·ªÉ implement nhi·ªÅu interface.

V√≠ d·ª•:

interface Learnable {
    void study(String subject);
}

interface Printable {
    void printInfo();
}

class Student implements Learnable, Printable {
    String name;

    public Student(String name) { this.name = name; }

    @Override
    public void study(String subject) {
        System.out.println(name + " is learning " + subject);
    }

    @Override
    public void printInfo() {
        System.out.println("Student name: " + name);
    }
}

4. Khi n√†o d√πng?

Abstract class: khi mu·ªën chia s·∫ª thu·ªôc t√≠nh + logic chung.

Interface: khi mu·ªën nhi·ªÅu class c√≥ c√πng h√†nh vi nh∆∞ng kh√¥ng li√™n quan nhau.

Ph·∫ßn B ‚Äì Java Collection Framework
1. List

L∆∞u d·ªØ li·ªáu c√≥ th·ª© t·ª±, cho ph√©p tr√πng.

ArrayList, LinkedList.

V√≠ d·ª•:

import java.util.*;

public class DemoList {
    public static void main(String[] args) {
        List<String> students = new ArrayList<>();
        students.add("Linh");
        students.add("Huy");
        students.add("Lan");

        students.remove("Huy");
        students.add(1, "An");

        System.out.println(students);
    }
}

2. Set

Kh√¥ng cho ph√©p tr√πng, kh√¥ng ƒë·∫£m b·∫£o th·ª© t·ª±.

import java.util.*;

public class DemoSet {
    public static void main(String[] args) {
        Set<String> emails = new HashSet<>();
        emails.add("a@gmail.com");
        emails.add("b@gmail.com");
        emails.add("a@gmail.com"); // tr√πng ‚Üí b·ªè qua

        System.out.println(emails);
    }
}

3. Map

L∆∞u tr·ªØ theo key ‚Üí value.

Key kh√¥ng tr√πng.

import java.util.*;

public class DemoMap {
    public static void main(String[] args) {
        Map<Integer, String> courses = new HashMap<>();
        courses.put(1, "Java");
        courses.put(2, "Spring Boot");

        System.out.println(courses.get(1));

        for (Integer key : courses.keySet()) {
            System.out.println(key + " -> " + courses.get(key));
        }
    }
}

4. Queue

C·∫•u tr√∫c d·ªØ li·ªáu h√†ng ƒë·ª£i (FIFO).

import java.util.*;

public class DemoQueue {
    public static void main(String[] args) {
        Queue<String> queue = new LinkedList<>();
        queue.add("User1");
        queue.add("User2");
        queue.add("User3");

        System.out.println(queue.poll()); // l·∫•y User1
        System.out.println(queue.poll()); // l·∫•y User2
    }
}